Index: git/AudioManagerDaemon/src/CAmDatabaseHandlerSQLite.cpp
===================================================================
--- git.orig/AudioManagerDaemon/src/CAmDatabaseHandlerSQLite.cpp	2014-10-08 17:22:09.030662124 +0300
+++ git/AudioManagerDaemon/src/CAmDatabaseHandlerSQLite.cpp	2014-10-08 17:22:44.000000000 +0300
@@ -363,14 +363,14 @@
 
     if ((eCode = sqlite3_step(query)) == SQLITE_ROW)
     {
-        command = "UPDATE " + std::string(SINK_TABLE) + " SET name=?, domainID=?, sinkClassID=?, volume=?, visible=?, availability=?, availabilityReason=?, muteState=?, mainVolume=?, reserved=? WHERE sinkID=" + i2s(sqlite3_column_int(query, 0));
+        command = "UPDATE " + std::string(SINK_TABLE) + " SET name=?, domainID=?, sinkClassID=?, volume=?, visible=?, availability=?, availabilityReason=?, muteState=?, volume=?, reserved=? WHERE sinkID=" + i2s(sqlite3_column_int(query, 0));
     }
     else if (eCode == SQLITE_DONE)
     {
         //if sinkID is zero and the first Static Sink was already entered, the ID is created
         if (sinkData.sinkID == 0 && !mFirstStaticSink && !existSinkName(sinkData.name))
         {
-            command = "INSERT INTO " + std::string(SINK_TABLE) + "(name, domainID, sinkClassID, volume, visible, availability, availabilityReason, muteState, mainVolume, reserved) VALUES (?,?,?,?,?,?,?,?,?,?)";
+            command = "INSERT INTO " + std::string(SINK_TABLE) + "(name, domainID, sinkClassID, volume, visible, availability, availabilityReason, muteState, volume, reserved) VALUES (?,?,?,?,?,?,?,?,?,?)";
         }
         else
         {
@@ -380,7 +380,7 @@
                 MY_SQLITE_FINALIZE(query)
                 return (E_ALREADY_EXISTS);
             }
-            command = "INSERT INTO " + std::string(SINK_TABLE) + "(name, domainID, sinkClassID, volume, visible, availability, availabilityReason, muteState, mainVolume, reserved, sinkID) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
+            command = "INSERT INTO " + std::string(SINK_TABLE) + "(name, domainID, sinkClassID, volume, visible, availability, availabilityReason, muteState, volume, reserved, sinkID) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
         }
     }
     else
@@ -1088,7 +1088,7 @@
     {
         return (E_NON_EXISTENT);
     }
-    command = "UPDATE " + std::string(SINK_TABLE) + " SET mainVolume=? WHERE sinkID=" + i2s(sinkID);
+    command = "UPDATE " + std::string(SINK_TABLE) + " SET volume=? WHERE sinkID=" + i2s(sinkID);
     MY_SQLITE_PREPARE_V2(mpDatabase, command.c_str(), -1, &query, NULL)
     MY_SQLITE_BIND_INT(query, 1, mainVolume)
     if ((eCode = sqlite3_step(query)) != SQLITE_DONE)
@@ -2794,7 +2794,7 @@
     int eCode = 0;
     am_SinkType_s temp;
 
-    std::string command = "SELECT name, sinkID, availability, availabilityReason, muteState, mainVolume, sinkClassID FROM " + std::string(SINK_TABLE) + " WHERE visible=1 AND reserved=0";
+    std::string command = "SELECT name, sinkID, availability, availabilityReason, muteState, volume, sinkClassID FROM " + std::string(SINK_TABLE) + " WHERE visible=1 AND reserved=0";
     MY_SQLITE_PREPARE_V2(mpDatabase, command.c_str(), -1, &query, NULL)
 
     while ((eCode = sqlite3_step(query)) == SQLITE_ROW)
